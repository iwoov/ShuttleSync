name: build-matrix

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

env:
  BACKEND_DIR: backend
  BUILD_DIR: build

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
            ext: ""
            cgo_enabled: 1
            cc: x86_64-linux-musl-gcc
            ldflags: "-linkmode=external -extldflags=-static"
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe
            cgo_enabled: 0
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
            ext: ""
            cgo_enabled: 0
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
            ext: ""
            cgo_enabled: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ env.BACKEND_DIR }}/go.mod
          cache: true

      - name: Install musl toolchain
        if: ${{ matrix.goos == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Download dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: go mod download

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Copy frontend build to backend
        run: |
          rm -rf backend/web
          mkdir -p backend/web
          cp -R frontend/dist/. backend/web/

      - name: Build backend
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo_enabled }}
          CC: ${{ matrix.cc }}
        run: |
          OUTPUT_DIR="../${{ env.BUILD_DIR }}/${{ matrix.suffix }}"
          mkdir -p "$OUTPUT_DIR"
          LDFLAGS="${{ matrix.ldflags }}"
          if [ -n "$LDFLAGS" ]; then
            go build -ldflags "$LDFLAGS" -o "$OUTPUT_DIR/shuttlesync${{ matrix.ext }}" ./
          else
            go build -o "$OUTPUT_DIR/shuttlesync${{ matrix.ext }}" ./
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shuttlesync-${{ matrix.suffix }}
          path: ${{ env.BUILD_DIR }}/${{ matrix.suffix }}
          if-no-files-found: error
